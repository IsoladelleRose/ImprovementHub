# Simple single-stage Dockerfile for Railway deployment
FROM openjdk:17-jdk-slim

# Install Node.js, npm, Maven, nginx, and curl
RUN apt-get update && apt-get install -y \
    nodejs \
    npm \
    maven \
    nginx \
    curl \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Build frontend
COPY frontend/package*.json ./frontend/
WORKDIR /app/frontend
RUN npm ci
COPY frontend/ ./
RUN npm run build

# Build backend
WORKDIR /app/backend
COPY backend/temp-hide/pom.xml ./
RUN mvn dependency:go-offline -B
COPY backend/temp-hide/src src
RUN mvn clean package -DskipTests

# Debug: Show what was built
RUN echo "=== Backend build results ===" && ls -la target/

# Copy frontend build to nginx directory
RUN cp -r /app/frontend/dist/frontend/* /var/www/html/ 2>/dev/null || \
    cp -r /app/frontend/dist/* /var/www/html/ 2>/dev/null || \
    echo "Frontend dist directory not found"

# Debug: Show frontend files
RUN echo "=== Frontend files ===" && ls -la /var/www/html/

# Create nginx configuration
RUN cat > /etc/nginx/sites-available/default << 'EOF'
server {
    listen 80 default_server;
    listen [::]:80 default_server;

    root /var/www/html;
    index index.html index.htm;

    server_name _;

    location / {
        try_files $uri $uri/ /index.html;
    }

    location /api/ {
        proxy_pass http://localhost:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /health {
        proxy_pass http://localhost:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
EOF

# Create startup script with dynamic port support
RUN cat > /app/start.sh << 'EOF'
#!/bin/bash

# Update nginx config for Railway's dynamic port
if [ ! -z "$PORT" ]; then
    sed -i "s/listen 80/listen $PORT/" /etc/nginx/sites-available/default
fi

# Find and start the backend JAR
JAR_FILE=$(find /app/backend/target -name "*.jar" -type f | head -1)
if [ -z "$JAR_FILE" ]; then
    echo "ERROR: No JAR file found!"
    find /app -name "*.jar" -type f
    exit 1
fi

echo "Found JAR file: $JAR_FILE"
echo "Starting Spring Boot backend..."
java -XX:+UseContainerSupport -XX:MaxRAMPercentage=50.0 -jar "$JAR_FILE" &

# Wait for backend to start
sleep 15

echo "Starting nginx..."
nginx -g "daemon off;"
EOF

RUN chmod +x /app/start.sh

# Expose port
EXPOSE 80

WORKDIR /app

CMD ["/app/start.sh"]